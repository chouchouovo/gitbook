{"COPYRIGHT.html":{"url":"COPYRIGHT.html","title":"版权","keywords":"","body":"版权 http://creativecommons.org/licenses/by-nc-sa/4.0/ 《不可思议的前端之路》由 chouchou 编写，采用 知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议进行许可。 本人保留所有权限，保留出版权限，未经本人书面许可任何人不得用于商业出版。 支付宝捐赠请扫码. Copyright © chouchou 2019 all right reserved，powered by Gitbook当前页面修订时间： 2019-09-22 11:28:12 "},"./":{"url":"./","title":"序言","keywords":"","body":"序言 《C! 前端》系列篇： 《C! 前端 -- HTML 篇》 《C! 前端 -- CSS 篇》 《C! 前端 -- ECMASCript 篇》 《C! 前端 -- 计算机网络篇》 《C! 前端 -- 数据操作 篇》 《C! 前端 -- 正则 篇》 《C! 前端 -- 安全 篇》 《C! 前端 -- Vue 篇》 《C! 前端 -- React 篇》 《C! 前端 -- 动画 篇》 《C! 前端 -- node 篇》 《C! 前端 -- 架构 篇》 《C! 前端 -- 现代 Web 技术发展》 《C! 前端 -- 3D 篇》 本书讲解的是《C! 前端 -- HTML 篇》，如何构建 HTML 知识体系 主要内容： [x] 版权 [x] 序言 [ ] HTML 5.2 中文版 [ ] 1 介绍 [ ] 2 共同基础设施 [ ] 3 HTML 文档的语义，结构和 API [ ] 4 HTML 的元素 [ ] 5 用户互动 [ ] 6 加载网页 [ ] 7 Web 应用程序 API [ ] 8 HTML 语法 [ ] 9 XML 语法 [ ] 10 渲染 [ ] 11 过时的功能 [ ] 12 IANA 考虑因素 进度安排 目前主要针对 3 和 4 小节进行整理 其中元素整理平均不少于 2 - 3 个（简易 3 个；复杂 2 个） Copyright © chouchou 2019 all right reserved，powered by Gitbook当前页面修订时间： 2019-10-04 13:12:09 "},"docs/HTML5.2/1 介绍.html":{"url":"docs/HTML5.2/1 介绍.html","title":"1 关于 CSS 2.2 规范","keywords":"","body":"1 介绍 1.1 背景 1.2 读者 1.3 范围 1.4 历史 1.5 涉及说明 1.5.1 脚本运行的可串行化 1.5.2 符合其它规范 1.5.3 可扩展性 1.6 HTML & XML 语法 1.7 本规范的结构 1.7.1 如何阅读本规范 1.7.2 排版约定 1.8 隐私问题 1.9 快速介绍 HTML 1.9.1 使用 HTML 编写安全应用程序 1.9.2 使用脚本 API 时要避免的常见缺陷 1.9.3 如何在编写 HTML 时捕获错误：校验器和一致性检查器 1.10 一致性要求 1.10.1 代表性标记（Presentational markup） 1.10.2 语法错误 1.10.3 内容模型和属性值的限制 1.11 建议阅读 Copyright © chouchou 2019 all right reserved，powered by Gitbook当前页面修订时间： 2019-09-05 12:36:07 "},"docs/HTML5.2/2 共同基础设施.html":{"url":"docs/HTML5.2/2 共同基础设施.html","title":"2 共同基础设施","keywords":"","body":"2 共同基础设施 2.1 术语 2.1.1 资源 2.1.2 XML 兼容性 2.1.3 DOM 树 2.1.4 脚本 2.1.5 插件 2.1.6 字符编码 2.2 一致性要求 2.2.1 一致性类 2.2.2 依赖 2.2.3 可扩展性 2.2.4 使用 XPath 和 XSLT 进行交互 2.3 大小写敏感和字符串比较 2.4 常见的微型语法 2.4.1 常见的解析器习语 2.4.2 布尔属性 2.4.3 关键字和枚举属性 2.4.4 数字 2.4.4.1 有符号整数 2.4.4.2 非负整数 2.4.4.3 浮点数 2.4.4.4 百分比和长度 2.4.4.5 非零百分比和长度 2.4.4.6 浮点数列表 2.4.4.7 尺寸列表 2.4.5 日期和时间 2.4.5.1 Months 2.4.5.2 Dates 2.4.5.3 Yearless dates 2.4.5.4 Times 2.4.5.5 Floating dates and times 2.4.5.6 Time zones 2.4.5.7 Global dates and times 2.4.5.8 Weeks 2.4.5.9 Durations 2.4.5.10 Vaguer moments in time 2.4.6 颜色 2.4.7 以空格分隔的标记符号 2.4.8 以字母分隔的标记符号 2.4.9 引用 2.4.10 媒体查询 2.5 URL 2.5.1 术语 2.5.2 解析 URL 2.5.1 动态改变基本的 URL 2.6 获取资源 2.6.1 术语 2.6.2 处理模型 2.6.3 加密 HTTP 和相关的安全问题 2.6.4 确定资源的类型 2.6.5 从 meta 元素提取字符编码 2.6.6 CORS 设置属性 2.6.7 Referrer 策略属性 2.7 常见的 DOM 接口 2.7.1 在 IDL 属性反映内容属性 2.7.2 集合 2.7.2.1 HTMLAllCollection 接口 2.7.2.2 HTMLFormControlsCollection 接口 2.7.2.3 HTMLOptionsCollection 接口 2.7.3 DOMStringList 接口 2.7.4 垃圾收集 2.8 命名空间 2.9 安全传递结构化数据 2.9.1 序列化对象 2.9.2 可转移对象 2.9.3 StructuredSerializeInternal ( value, forStorage [ , memory ] ) 2.9.4 StructuredSerialize ( value ) 2.9.5 StructuredSerializeForStorage ( value ) 2.9.6 StructuredDeserialize ( serialized, targetRealm [ , memory ] ) 2.9.7 StructuredSerializeWithTransfer ( value, transferList ) 2.9.8 StructuredDeserializeWithTransfer ( serializeWithTransferResult, targetRealm ) 2.9.9 执行序列化和从其他规范转移 2.9.10 Blob 和 FileList 对象的补丁 Copyright © chouchou 2019 all right reserved，powered by Gitbook当前页面修订时间： 2019-09-05 13:05:57 "},"docs/HTML5.2/3 HTML 文档的语义，结构和 API.html":{"url":"docs/HTML5.2/3 HTML 文档的语义，结构和 API.html","title":"3 HTML 文档的语义，结构和 API","keywords":"","body":"3 HTML 文档的语义，结构和 API 3.1 文档 HTML UA 中的每个 XML 和 HTML 文档都由 Document 对象表示。[DOM41] Document 对象的 URL 在 DOM 规范中定义。它最初是在创建 Document 对象时设置的，但是可以在 Document 对象的生命周期内更改。例如，当用户导航到页面上的片段以及使用新的URL 调用 pushState() 方法时，它会更改。[DOM41] 警告：交互式用户代理通常在其用户界面中显示 Document 对象的 URL。这是用户可以通过该机制判断一个站点是否正在假冒另一个站点的主要的机制。 通过脚本使用 createDocument() 或 createHTMLDocument() 的 API 创建文档时，文档即可以执行后加载任务（原：task），又可以立即完全加载。 文档的 referrer 是一个字符串（表示 URL），可在文档创建时设置。如果未显示设置，则其值为空字符串。 每个 Document 对象都有一个最初未设置的重载覆盖标志。在某些情况下，该标志由 document.open() 和 document.write() 方法设置。当设置该标识时，文档还有一个重载覆盖缓存区，它是一个 Unicode 字符串，在重载时作为文档的源（原：source）。 在给定源浏览上下文的情况下，用户代理要执行重写的重载时，它必须采取以下措施： 让源（原：source）成为浏览上下文的活动文档的重载覆盖缓冲区的值。 让地址（原：address）成为浏览上下文的活动文档的 URL。 让 HTTPS 状态成为浏览上下文的活动文档的 HTTPS 状态。 让 引用者策略（原：referrer policy） 成为浏览上下文的活动文档的引用者策略。 让 CSP list 成为浏览上下文的活动文档的 CSP list。 在浏览上下文中导航到一个新的响应，该响应的主体（原：body）为源，header 列表为Referrer-Policy/referrer policy，CSP list为 CSP list，HTTPS 状态为HTTPS 状态，并设置启用异常标志和启用替换项。源浏览上下文是提供给重写的重载算法的上下文。当导航算法为此目的创建 Document 对象时，请设置该 Document 的重载替代标志并将其重载覆盖缓冲区设置为 source。重新抛出任何异常。 当需要在导航算法中设置文档的地址时，请使用地址作为替代 URL。 3.1.1 Document 对象 DOM 规范定义了一个 Document 接口，该接口对该规范进行了扩展： enum DocumentReadyState { \"loading\", \"interactive\", \"complete\" }; typedef (HTMLScriptElement or SVGScriptElement) HTMLOrSVGScriptElement; [OverrideBuiltins] partial interface Document { // resource metadata management [PutForwards=href, Unforgeable] readonly attribute Location? location; attribute USVString domain; readonly attribute USVString referrer; attribute USVString cookie; readonly attribute DOMString lastModified; readonly attribute DocumentReadyState readyState; // DOM tree accessors getter object (DOMString name); [CEReactions] attribute DOMString title; attribute DOMString dir; attribute HTMLElement? body; readonly attribute HTMLHeadElement? head; [SameObject] readonly attribute HTMLCollection images; [SameObject] readonly attribute HTMLCollection embeds; [SameObject] readonly attribute HTMLCollection plugins; [SameObject] readonly attribute HTMLCollection links; [SameObject] readonly attribute HTMLCollection forms; [SameObject] readonly attribute HTMLCollection scripts; NodeList getElementsByName(DOMString elementName); readonly attribute HTMLOrSVGScriptElement? currentScript; // classic scripts in a document tree only // dynamic markup insertion Document open(optional DOMString type = \"text/html\", optional DOMString replace = \"\"); WindowProxy open(DOMString url, DOMString name, DOMString features, optional boolean replace = false); [CEReactions] void close(); [CEReactions] void write(DOMString... text); [CEReactions] void writeln(DOMString... text); // user interaction readonly attribute WindowProxy? defaultView; readonly attribute Element? activeElement; boolean hasFocus(); [CEReactions] attribute DOMString designMode; [CEReactions] boolean execCommand(DOMString commandId, optional boolean showUI = false, optional DOMString value = \"\"); boolean queryCommandEnabled(DOMString commandId); boolean queryCommandIndeterm(DOMString commandId); boolean queryCommandState(DOMString commandId); boolean queryCommandSupported(DOMString commandId); DOMString queryCommandValue(DOMString commandId); // special event handler IDL attributes that only apply to Document objects [LenientThis] attribute EventHandler onreadystatechange; }; Document implements GlobalEventHandlers; Document implements DocumentAndElementEventHandlers; Document 有 HTTPS 状态（一个 HTTPS 状态值），初始为 “none”，表示用于传递文档数据的网络通道的安全属性。 Document 有引用者策略（一个引用者策略），初始为 空字符串，表示由文档发起请求使用的默认引用者策略。 Document 有 CSP 列表，该列表是在此上下文中处于活动状态的内容安全策略对象的列表。除非另有说明，否则列表为空。 Document 有 module map，它是一个模块映射，初始为 空。 3.1.2 资源元数据管理 document.referrer 返回用户从中导航到的文档的 URL，除非它被阻止或没有这样的文档，在这种情况下，它将返回空字符串。 noreferrer 链接类型可以阻止引用者来源。 referrer 属性必须返回文档的 referrer。 document.cookie[=value] 返回应用在文档上的 HTTP cookies。如果没有 cookies 或 cookies 无法应用在此资源上，则返回空字符串。 可以向元素的 HTTP cookies 上添加新的 cookies。 如果将内容沙盒化成唯一的来源（例如，在有 sandbox 属性的 iframe 中），则在获取和设置时会抛出 “SecurityError” DOMException。 cookie 属性由文档的 URL 标识的资源的 cookie。 Todo 3.1.3 DOM 树访问器 Todo 3.2 元素 3.2.1 语义 HTML 中的元素，属性和属性值（通过此规范）定义为具有某些含义（语义）。例如，ol 元素表示一个有序列表，而 lang 属性表示内容的语言。 这些定义允许 HTML 处理器（例如 Web 浏览器和搜索引擎）在不同的上下文中一致地呈现文档和应用程序。 示例 1 在此示例中，HTML 标题可以在桌面浏览器中显示为大文本，或者在移动浏览器中以粗体显示标准大小的文本。在这两种情况下，语义信息都保持不变 - h1 和 h2 元素表示标题。 Favorite books Favorite books These are a few of my favorite books. The Belgariad Five books by David and Leigh Eddings. The Hitchhiker’s Guide to the Galaxy A trilogy of five books by Douglas Adams. 此语义信息对于辅助技术很重要。例如，屏幕阅读器将向浏览器查询语义信息，并使用该信息以合成语音呈现文档或应用程序。 在某些情况下，辅助技术使用语义信息来提供其他功能。语音识别工具可能会提供语音命令，例如将焦点移到 main 元素的开头。 当使用不合适的 HTML 元素或属性时，它将剥夺 HTML 处理器宝贵的语义信息。 示例 2 在此示例中，可以使用样式来创建标题和其他组件的可视表示，但是由于尚未使用合适的 HTML 元素，因此几乎没有语义信息可用于Web浏览器，搜索引擎和辅助技术。 Favorite books Favorite books These are a few of my favorite books. The Belgariad Five books by David and Leigh Eddings. The Hitchhiker’s Guide to the Galaxy A trilogy of five books by Douglas Adams. 文档可以在处理过程中动态更改。脚本和其他机制可用来更改属性值，文本或整个文档结构。因此，文档的语义是基于特定时间的文档状态，但是也可以响应外部事件而更改。用户代理必须更新其文档显示方式以反映这些更改。 node document 的没有浏览上下文的 DOM 节点要求 HTML 语法和 XML 语法一致性。 示例 3 在此示例中，audio 元素用于播放音乐曲目。controls 属性用于显示用户代理播放器，并且随着音乐的播放，控件会更新以指示进度。为了响应这些变化，更新可用的语义信息。 3.2.2 在 DOM 中的元素 在 DOM 中表示 HTML 元素的节点必须实现本规范相关部分中列出的接口，并将这些接口暴露给脚本。即使这些文档位于另一个上下文中（例如，在 XSLT 转换内部），它也包含 XML 文档中的 HTML 元素。 在 DOM 中元素表示特征。也就是说，它们具有内在含义，也称为语义。 示例 4 例如，一个 ol 元素代表一个有序列表。 所有 HTML 元素的接口继承的基础接口都来自 HTMLElement 接口，并且该基本接口必须由没有附加要求的元素使用。 [HTMLConstructor] interface HTMLElement : Element { // metadata attributes [CEReactions] attribute DOMString title; [CEReactions] attribute DOMString lang; [CEReactions] attribute boolean translate; [CEReactions] attribute DOMString dir; [SameObject] readonly attribute DOMStringMap dataset; // user interaction [CEReactions] attribute boolean hidden; void click(); [CEReactions] attribute long tabIndex; void focus(); void blur(); [CEReactions] attribute DOMString accessKey; [CEReactions] attribute boolean draggable; [CEReactions] attribute boolean spellcheck; void forceSpellCheck(); [CEReactions, TreatNullAs=EmptyString] attribute DOMString innerText; }; HTMLElement implements GlobalEventHandlers; HTMLElement implements DocumentAndElementEventHandlers; HTMLElement implements ElementContentEditable; // Note: intentionally not [HTMLConstructor] interface HTMLUnknownElement : HTMLElement { }; Todo 3.2.3 元素定义 本规范中的每个元素都有一个包含以下信息的定义： 分类 元素所属类别的列表。在定义每个元素的内容模型时将使用它们。 可以使用此元素的上下文 元素可在何处使用的非规范性描述。该信息对于允许其作为孩子的元素的内容模型是多余的，并且仅出于方便而提供。 为简单起见，仅列出最具体的期望。例如，既可以包含流内容又可以包含短语内容的元素可以在期望流内容或短语内容的任何地方使用，但是由于可以期望流内容的任何地方，因此也可以期望短语内容（因为所有短语内容都是流内容），仅列出“期望短语内容的位置”。 内容模型 关于必须包含哪些内容作为元素的子代和后代的规范描述。 text/html 的标签省略 在 text/html 语法中是否可以省略开始和结束标签的非规范性描述。此信息对于可选标签部分中给出的规范要求是多余的，并且仅为方便起见在元素定义中提供了此信息。 内容属性 可以在元素上指定的规范性列表（除非另有禁止），以及这些属性的非规范性描述。（短划线左侧的内容是规范性的，短划线右侧的内容不是标准的。） 允许的 ARIA role 属性值 可以在元素上指定的 ARIA 角色属性值的非规范列表（除非另有禁止，否则）。 每个值都链接到非规范性描述。 允许的 ARIA state和 property 属性 链接到 “Global aria-*” 属性列表以及状态和属性属性部分中所述的允许的角色，状态和属性表。 DOM interface 此类元素必须实现的 DOM 接口的规范定义。 然后，对元素表示什么进行描述，以及可能适用于作者和实现的任何其他规范性一致性标准。有时还包括示例。 3.2.3.1 属性 属性值是一个字符串。除非另有说明，否则 HTML 元素上的属性值可以是任何字符串值，包括空字符串，并且对可以在此类属性值中指定什么文本没有限制。 3.2.4 内容模型 本规范中定义的每个元素都有一个内容模型：元素预期内容的描述。HTML 元素的内容必须符合该元素的内容模型中所述的要求。元素的内容是其在 DOM 中的子元素。 注意 当解析 template 元素时，会将其子元素分配给模板内容（在创建元素时将单独的DocumentFragment 分配给元素），而不是其子元素。 元素之间始终允许使用空格字符。用户代理将源标记中元素之间的这些字符表示为 DOM 中的“文本”节点。空文本节点和仅由这些字符序列组成的文本节点被视为元素间的空白（原：inter-element white space）。 在确定元素的内容是否与元素的内容模型匹配时，必须忽略元素间的空白，注释节点和处理指令节点，而在遵循定义文档和元素语义的算法时，则必须忽略元素间的空白。 注意 因此，如果 A 和 B 具有相同的父节点，并且它们之间没有其他元素节点或 Text 节点（除元素间的空白外），则元素 A 被称为在第二元素 B 之前或之后 类似地，如果元素除元素间空白，注释节点和处理指令节点外，不包含其他节点，则该节点是该元素的唯一子元素。 除了在明确允许的地方（每个元素的定义的地方或其他规范定义的地方）以外，作者不得在任何地方使用 HTML 元素。对于 XML 复合文档，如果这些上下文被定义为提供相关上下文，则这些上下文可以位于其他命名空间的元素内。 示例 5 例如，Atom 规范定义了一个 content 元素。当其 type 属性的值为 xhtml 时，Atom 规范要求它包含单个 HTML div 元素。因此，即使在本说明书中没有明确规范性声明，在该上下文中也允许使用 div 元素。[RFC4287] 另外，HTML 元素可以是孤立节点（即没有父节点）。 示例 6 例如，创建 td 元素并将其存储在脚本中的全局变量中是符合要求的，即使 td 元素只在 tr 元素内部使用也是如此。 var data = { name: \"Banana\", cell: document.createElement('td'), }; 3.2.4.1 \"空\" 内容模型 当元素的内容模型为空时，该元素必须不包含 Text 节点（元素间的空白除外），也不能包含元素节点。 注意 为了方便起见，大多数内容模型为 “空” 的 HTML 元素也都是 void 元素（在 HTML 语法中没有结束标签的元素）。但是，这些是完全独立的概念。 3.2.4.2 内容种类 在 HTML 中的每个元素被分为零个或多个类别，这些类别将具有相似特征的元素分组在一起。 在本规范中使用了以下广泛的类别： 元数据内容（原：Metadata content） 流内容（原：Flow content） 分节内容（原：Sectioning content） 标题内容（原：Heading content） 短语内容（原：Phrasing content） 可嵌入内容（原：Embedded content） 可交互内容（原：Interactive content） 注意 一些元素也属于本规范其他部分中定义的其他类别。 这些类别如下相关： 分节内容，标题内容，短语内容，可嵌入内容，可交互内容都属于流内容。元数据（内容）有时是流内容。元数据和交互式内容有时是短语内容。可嵌入内容也是短语内容的一种，但有时也是可交互内容。 其他类别也用于特定目的，例如，使用许多类别指定表单控件以定义通用要求。一些元素具有特定的要求，并且不属于任何特定类别。 3.2.4.2.1 元数据内容（Metadata content） 元数据内容 是设置其余内容的呈现形式或行为，或设置文档与其他文档的关系，或传达其他“带外”信息的内容。 其语义主要与元数据有关的其他命名空间的元素（例如，RDF）也是元数据内容。 示例 7 因此，在 XML serialization 中，可以使用 RDF，如下所示： Hedral’s Home Page Cat Hedral Sir My home page I like playing with string, I guess. Sister says squirrels are fun too so sometimes I follow her to play with them. 但是，在 HTML serialization 中这是不可能的。 3.2.4.2.2 流内容（Flow content） 文档和应用程序 主体（原：body）中使用的大多数元素都归类为 流内容。 3.2.4.2.3 节内容（Sectioning content） 节内容 是定义页眉和页脚范围的内容。 每个 节内容 元素都可能具有标题和大纲。有关更多详细信息，请参见标题部分。 注意 也有某些元素是节的根（原：sectioning roots）的。这些与节内容（原：sectioning content）不同，但也可以有大纲。 3.2.4.2.4 标题内容（Heading content） 标题内容 定义了节的标题（无论是使用节内容元素明确标记，还是标题内容本身所隐含）。 3.2.4.2.5 短语内容（Phrasing content） 短语内容 是文档的文本，以及在段落内级别标记该文本的元素。一系列短语内容构成了段落。 注意 分类为短语内容的大多数元素只能包含本身被分类为短语内容的元素，而不能包含任何流内容。 在内容模型的上下文中，文本 不表示任何内容，也不表示文本节点。文本有时单独用作内容模型，但也可以作为短语内容，并且可以是元素之间的空白（如果 Text 节点为空或仅包含空格字符）。 文本节点和属性值必须包含 Unicode 字符，不能包含 U+0000 字符，不能包含一直未定义的Unicode 字符（非字符），并且不能包含空格字符以外的控制字符。该规范包括对 Text 节点的精确值和属性值的附加约束，具体取决于它们的精确上下文。 对于 HTML 中的元素，文本内容模型的约束也取决于元素的类型。例如，textarea 元素内的“ 3.2.4.2.6 可嵌入内容（Embedded content） 可嵌入内容 是将另一个资源导入文档中的内容，或来自插入到文档中的另一个词汇表中的内容。 对于本规范中定义的内容模型而言，来自 HTML namespace 以外的 namespace 并且传达不包含元数据内容的元素是可嵌入内容。（例如，MathML 或 SVG。） 某些 可嵌入内容元素 可能会回退内容：无法使用外部资源（例如，由于格式不受支持）而要使用的内容。元素定义会说明回退是什么（如果有的话）。 3.2.4.2.7 可交互内容（Interactive content） 可交互内容 是专门用于用户交互的内容。 tabindex 属性还可以让任何元素成为可交互内容。 3.2.4.2.8 可感知内容（Palpable content） 通常，其内容模型允许任何流内容或短语内容的元素在其内容中至少具有一个 可感知内容 且未指定 hidden 属性的节点。 注意 通过提供一些 后代非空的 文本，或者用户可以听到的其他内容（audio 元素）或查看（video，img 或 canvas 元素）或与之交互的其他内容（例如，可交互表单控件），可感知内容使元素变得非空。 但是，此要求并不是硬性要求，因为在许多情况下，元素可以合法地为空，例如，当它用作占位符（稍后将由脚本填充）时，或者当该元素是模板的一部分时，并会在大多数页面上使用，但在某些页面上是不相关的。 鼓励一致性检查器为作者提供一种机制，用来查找未能满足此要求的元素，以作为作者的辅助工具。 以下元素是 可感知内容（元素）： 3.2.4.2.9 支持脚本的元素（Script-supporting elements） 支持脚本的元素 是那些本身不表示任何内容（即没有呈现）但用于支持脚本（例如为用户提供功能）的元素。 以下元素是 支持脚本的元素： 3.2.4.3 透明内容模型（Transparent content models） 有些元素被描述为 透明 的。他们在内容模型的描述中具有 “透明” 的含义。透明元素的内容模型是从其父元素的内容模型派生而来的：内容模型的透明部分所需的元素与父元素的透明元素的内容模型的元素是一样的（原：the elements required in the part of the content model that is \"transparent\" are the same elements as required in the part of the content model of the parent of the transparent element in which the transparent element finds itself）。 示例 8 例如，ruby 元素内的 ins 元素不能包含 rt 元素，因为 ruby 元素的内容模型中允许 ins 元素的的部分是短语内容，而 rt 元素不是短语内容。 注意 在某些情况下，透明元素彼此嵌套，则该过程必须迭代应用。 示例 9 看以下片段： Apples 为了检查 a 元素内是否允许使用 “Apples”，将检查内容模型。a 元素的内容模型是透明的，map 元素也是透明的，ins 元素也是透明的，object 元素中的 ins 元素的一部分也是透明的。object 元素位于 p 元素中，其内容模型是短语内容。因此，“Apples” 是允许的，因为文本是短语内容。 如果透明元素没有父元素，则必须将其内容模型的 “透明” 部分视为接受任何流内容。 3.2.4.4 段落 注意 本节中定义的术语段落不仅用于 p 元素的定义。此处定义的段落概念用于描述如何解释文档。p 元素只是标记段落的几种方式之一。 段落 通常是一系列短语内容构成的文本块，其中包含一个或多个讨论特定主题的句子，和版面设计一样，但也可用于更一般的主题分组。例如，地址也是段落，也就是诗歌中的形式，副词或节的一部分。 示例 10 在下面的示例中，一节中有两个段落。还有一个标题，它包含不是段落的短语内容。注意注释和元素之间空格如何不构成段落。 Example of paragraphs This is the first paragraph in this example. This is the second. 在流内容中的段落是相对于文档的外观定义的，而不会使 a，ins，del 和 map 元素复杂化，因为这些元素及其混合内容模型可以跨越段落边界，如下面的前两个示例所示。 注意 通常，最好避免元素跨越段落边界。维持这样的标签可能很困难。 示例 11 以下示例采用了先前示例中的标签，并在一些标签周围放置了 ins 和 del 元素，以显示文本已更改（尽管在这种情况下，公认的更改没有多大意义）。注意，尽管 ins 和 del 元素使该示例与上一个段落具有完全相同的段落 - ins 元素跨越了标题和第一段，而 del 元素跨越了两个段落之间的边界。 Example of paragraphs This is the first paragraph in this example. This is the second. Let view be a view of the DOM that replaces all a, ins, del, and map elements in the document with their contents. Then, in view, for each run of sibling phrasing content nodes uninterrupted by other types of content, in an element that accepts content other than phrasing content as well as phrasing content, let first be the first node of the run, and let last be the last node of the run. For each such run that consists of at least one node that is neither embedded content nor inter-element white space, a paragraph exists in the original DOM from immediately before first to immediately after last. (Paragraphs can thus span across a, ins, del, and map elements.) 一致性检查器可能会警告作者其段落相互重叠的情况（object，video，audio 和 canvas 元素可能会发生这种情况，并且通过其他名称空间中的元素（例如 SVG 或 MathML）间接允许 HTML 进一步嵌入其中。 段落也由 p 元素显式构成。 注意 p 元素可以包裹单独的段落，否则，除了短语内容以外的内容都会将分隔段落。 示例 12 在下面的示例中，链接跨越第一个段落的一半，所有标题将两个段落分开，第二段落的一半。它跨越了段落和标题。 Welcome! This is home of... The Falcons! The Lockheed Martin multirole jet fighter aircraft! This page discusses the F-16 Fighting Falcon’s innermost secrets. 这是另一种标记方法，这一次明确显示了这些段落，并将一个 link 元素分为三部分： Welcome! This is home of... The Falcons! The Lockheed Martin multirole jet fighter aircraft! This page discusses the F-16 Fighting Falcon’s innermost secrets. 示例 13 使用定义回退内容的某些元素时，段落可能会重叠。例如，在以下部分中： My Cats You can play with my cat simulator. To see the cat simulator, use one of the following links: Download simulator file Use online simulator Alternatively, upgrade to the Mellblom Browser. I’m quite proud of it. 这里有五个段落： 一段是 \"You can play with my cat simulator. object I’m quite proud of it.\", 其中 object 是 object 元素。 一段是 \"To see the cat simulator, use one of the following links:\"。 一段是 \"Download simulator file\"。 一段是 \"Use online simulator\"。 一段是 \"Alternatively, upgrade to the Mellblom Browser.\" 第一段与其他四段重叠。支持 “cats.sim” 资源的用户代理将仅显示第一个，但是显示回退的用户代理将混淆地显示第一段的第一句话，就好像它与第二段在同一段落中一样，并显示最后一段，就好像它在第一段第二句的开头一样。 为了避免这种混淆，可以使用显式的 p 元素。例如： My Cats You can play with my cat simulator. To see the cat simulator, use one of the following links: Download simulator file Use online simulator Alternatively, upgrade to the Mellblom Browser. I’m quite proud of it. 3.2.5 全局属性 以下属性是所有 HTML 元素共有的，并且可以在所有 HTML 元素上指定（甚至在本规范中未定义的元素）： 这些属性仅在本规范定义为 HTML 元素的属性。当本规范涉及具有这些属性的元素时，不能将未定义为具有这些属性的名称空间中的元素视为具有这些属性的元素。 示例 14 例如，在以下 XML 片段中，“bogus” 元素不具有本规范中定义的 dir 属性，尽管具有文字名称为 “dir” 的属性。因此，最里面的 span 元素的方向性是 “rtl”，它是从 div 元素通过 “bogus” 元素间接继承的。 DOM 规范为任何的 namespace 中的任何元素的 class，id 和 slot 属性定义了其他用户代理要求。[DOM41] 可以在所有 HTML 元素上指定 class，id 和 slot 属性。 在 HTML 元素上指定时，class 属性必须具有一个值，该值是一组用空格分隔的标记，代表该元素所属的各种类（译注：指的就是 class）。 注意 将 class 分配给元素，在 CSS 中会影响 CSS 选择器中的类匹配，在 DOM 中会影响 getElementsByClassName() 方法及其他此类功能。 作者可以在 class 属性中使用的 token 没有其他限制，但是鼓励作者使用描述内容性质的值，而不是描述内容期望呈现的值。 在 HTML 元素上指定时，id 属性值在元素树中的所有 ID 中必须是唯一的，并且必须至少包含一个字符。该值不得包含任何空格字符。 注意 id 属性指定其元素的唯一标识符（ID）。 ID 可以采用的形式没有其他限制：特别是，ID 可以仅由数字组成，以数字开头，以下划线开头，仅包含标点符号等。 元素的唯一标识符可用于多种用途，最显着的方式是使用片段链接到文档的特定部分的方式，脚本编写时定位元素的方式以及从 CSS 样式化特定元素的方式。 标识符是不透明的字符串。特殊含义不应从 id 属性的值得出。 这里没有特定于HTML元素的 slot 属性的一致性要求。 为了使辅助技术设备能够显示比 HTML 元素和属性可能更细粒度的界面，可以为辅助技术产品指定一组注释（ARIA role 和 aria-* 属性）。[WAI-ARIA-1.1] 可以在任何 HTML 元素上指定以下事件处理程序内容属性： 注意 当在 body 元素上指定时，带有星号的属性具有不同的含义，因为这些元素以相同的名称暴露给 Window 对象的事件处理程序。 注意 虽然这些属性适用于所有元素，但并不是对所有元素都有用。 例如，只有媒体元素将永远不会收到用户代理触发的 volumechange 事件。 可以在任何 HTML 元素上指定自定义数据属性（例如，data-foldername 或 data-msgid），以存储特定于页面的自定义数据。 在 HTML 文档中，HTML namespace 中的元素只有在具有该值 “http://www.w3.org/1999/xhtml” 时，才可以指定 xmlns 属性。这不适用于 XML 文档。 注意 在 HTML 中，xmlns 属性绝对无效。它基本上是护身符。仅允许它使与 XML 之间的迁移稍微容易一些。当 HTML 解析器进行解析时，该属性最终不会出现在任何 namespace 中，而不是 XML 中的 namespace 声明属性那样的 “http://www.w3.org/2000/xmlns/” namespace。 注意 在 XML 中，xmlns 属性是 namespace 声明机制的一部分，并且元素实际上不能在未指定 namespace 的情况下使用 xmlns 属性。 XML 规范还允许在 XML 文档中任何元素的 XML 名称空间中使用 xml:space 属性。 此属性对 HTML 元素无效，因为 HTML 的默认行为是保留空白。[XML] 注意 无法在使用 text/html 语法对 HTML 元素上的 xml:space 属性进行序列化。 3.2.5.1 title 属性 3.2.5.2 lang 和 xml:lang 属性 3.2.5.3 translate 属性 3.2.5.4 xml:base 属性 3.2.5.5 dir 属性 3.2.5.6 style 属性 3.2.5.7 使用 data-* 属性嵌入自定义不可见数据 3.2.6 innerText IDL 属性 3.2.7 与双向算法有关的要求 3.2.7.1 编写双向算法的一致性标准 3.2.7.2 用户代理一致性标准 3.2.8 WAI-ARIA 和 HTML Accessibility API 的映射 3.2.8.1 ARIA 编写要求 3.2.8.2 一致性检查器实现要求 3.2.8.3 用户代理实施要求 3.2.8.3.1 ARIA 角色属性 3.2.8.3.2 State 和 Property 属性 3.2.8.4 允许 ARID 角色，states 和 properties Copyright © chouchou 2019 all right reserved，powered by Gitbook当前页面修订时间： 2019-09-27 19:19:00 "},"docs/HTML5.2/4 HTML 的元素.html":{"url":"docs/HTML5.2/4 HTML 的元素.html","title":"4 HTML 的元素","keywords":"","body":"4 HTML 的元素 4.1 文档元素 4.1.1 html 元素 元素定义 类别： 无 可以使用此元素的上下文： 作为文档的 document 元素 复合文档允许使用子文档片段的任何位置 内容模型： head 元素后紧跟一个 body 元素 标签省略： 如果 html 元素里的开头不是注释，则可以省略 html 元素的开始标签。 如果 html 元素后没有紧跟注释，则可以省略 html 元素的结束标签。 内容属性： 全局属性 manifest属性：应用缓存清单 允许的 ARIA role attribute values： 无 允许的 Allowed ARIA state and property attributes： 无 DOM 接口： interface HTMLHtmlElement : HTMLElement {}; html 元素表示一个 HTML 文档的根。 建议作者在 html 根元素上指定lang属性，以提供文档的语言。这有助于语音合成工具确定使用什么发音，翻译工具确定使用什么规则，等等。 manifest 属性提供文档的应用程序缓存清单的地址（如果有的话）。如果存在该属性，则该属性的值必须是有效的非空 URL，该 URL 可能用空格包围。 > 基于 manifest 的应用程序缓存功能正在从 Web 平台中移除。（这是一个耗时多年的漫长过程。）强烈建议您此时不要使用应用程序缓存功能。请改用 service workers。[SERVICE-WORKERS] manifest 属性仅在文档加载（原：load）的早期阶段有效。因此，动态更改属性无效（因此，没有为此属性提供 DOM API）。 注意 出于应用程序缓存选择的目的，后面的基本元素不会影响 manifest 属性中的 URL 解析，因为在看到这些元素之前就已经处理了这些属性。 注意 window.applicationCache IDL 属性提供对脱机应用程序缓存机制的脚本访问。 注意 建议尽量减少在 html 元素上定义属性及其值的使用，是为了能够在前 1024 个字节内正确检测字符编码声明。 示例 1 以下示例中的 html 元素声明该文档的语言为英语。 Swapping Songs Swapping Songs Tonight I swapped some of the songs I wrote with some friends, who gave me some of the songs they wrote. I love sharing my music. 4.2 文档元数据 4.2.1 head 元素 元素定义 类别： 无 可以使用此元素的上下文： html 元素里的第一个元素 内容模型： 如果文档是 iframe srcdoc 文档，或者可以从更高级别的协议获得标题信息：元数据内容的零个或多个元素，其中不超过一个为 title 元素，不超过一个为 base 元素。 否则：元数据内容的一个或多个元素，其中一个元素恰好是 title 元素，而 base 元素不超过一个。 标签省略： 如果该元素为空，或者如果 head 元素内的第一个是一个元素，则可以省略 head 元素的开始标签。 如果 head 元素后面没有空格或注释，则可以省略 head 元素的结束标签。 内容属性： 全局属性 允许的 ARIA role attribute values： 无 允许的 Allowed ARIA state and property attributes： 全局 aria-* 属性 DOM 接口： interface HTMLHeadElement : HTMLElement {}; head 元素表示文档的元数据的集合。 示例 1 head 元素中元数据的集合可以很大，也可以很小。这是一个非常简短的示例： A document with a short head ... Here is an exa 长的例子： An application with a long head ... 注意 在大多数情况下，title 元素是必需的子元素，但是当高层协议提供标题信息时，例如，当 HTML 用作电子邮件创作格式时，在电子邮件的主题中，可以省略 title 元素。 注意 建议最少在 head 元素上定义的属性及其值的使用，以允许在前 1024 个字节内正确检测字符编码声明。 4.2.2 title 元素 元素定义 类别： 元数据内容 可以使用此元素的上下文： 在不包含 title 元素的 head 元素里 内容模型： 不是元素之间的空白的文本。 标签省略： 这两个标签都不可省略。 内容属性： 全局属性 允许的 ARIA role attribute values： 无 允许的 Allowed ARIA state and property attributes： 全局 aria-* 属性 DOM 接口： interface HTMLTitleElement : HTMLElement { attribute DOMString text; }; title 元素代表文档的标题或名称。即使在上下文之外（例如在用户的历史记录或书签中或在搜索结果中）使用文档时，作者也应使用标题来标识其文档。该文档的标题通常与第一个标题不同，因为从上下文中取出时，第一个标题不必单独显示。 每个文档的 title 元素不得超过一个。 注意 如果文档没有标题是合理的，则可能不需要 title 元素。有关何时需要元素的描述，请参见head 元素的内容模型。 title.text [ = value ] 返回元素的子文本内容。 可以设置，用给定值替换元素的子代。 IDL 属性文本必须返回 title 元素的子文本内容。设置时，它的作用方式必须与textContent IDL 属性相同。 示例 2 以下是使用 title 的一些示例，与这些页面上可能使用的顶级标题形成对比。 Introduction to The Mating Rituals of Bees ... Introduction This companion guide to the highly successful Introduction to Medieval Bee-Keeping book is... 下一页可能是同一站点的一部分。请注意 title 是如何明确描述主题的，而第一个标题是假定读者知道上下文是什么，因此不要怀疑舞蹈是 Salsa 还是 Waltz： Dances used during bee mating rituals ... The Dances 用作文档标题的字符串由 document.title IDL 属性给出。 用户代理在其用户界面中引用文档时，应使用文档标题。以这种方式使用 title 元素的内容时，应该使用该 title 元素的方向性来设置用户界面中文档标题的方向性。 4.2.3 base 元素 4.2.4 link 元素 4.2.4.1 处理媒体属性 4.2.4.2 处理 type 属性 4.2.4.3 从 link 元素获取资源 4.2.4.4 处理链接头 4.2.4.5 为用户提供跟踪使用 link 元素创建的超链接的方法 4.2.4.6 LinkStyle 接口 4.2.5 meta 元素 4.2.5.1 标准元数据名称 4.2.5.2 其他元数据名称 4.2.5.3 编译指令 4.2.5.4 其它编译指令 4.2.5.5 指定文档的字符编码 4.2.6 style 元素 4.2.7 脚本和样式之间的交互 4.3 节 4.3.1 body 元素 元素定义 类别： 节的根 可以使用此元素的上下文： 作为 html 元素中的第二个元素 内容模型： 流内容 标签省略： 如果元素为空，或者如果 body 元素内的第一个不是空格或注释，则可以省略 body 元素的开始标签，除非 body 元素内的第一个是 meta，link，script，style ，或 template 元素 如果未在 body 元素后紧跟注释，则可以忽略 body 元素的结束标签 内容属性： 全局属性 onafterprint onbeforeprint onbeforeunload onhashchange onlanguagechange onmessage onoffline ononline onpagehide onpageshow onpopstate onrejectionhandled onstorage onunhandledrejection onunload 允许的 ARIA role attribute values： document role (默认 - 不设置) 允许的 Allowed ARIA state and property attributes： 全局 aria-* 属性 适用于默认角色的任何 aria-* 属性 DOM 接口： interface HTMLBodyElement : HTMLElement { }; HTMLBodyElement implements WindowEventHandlers; body 元素表示文档的内容。 在文档中，只有一个 body 元素。 document.body IDL 属性可以使脚本轻松访问文档的body 元素。 注意 某些 DOM 操作（例如，drag 和 drop 模型的一部分）是根据 “body 元素” 定义的。就术语的定义而言，这是指在 DOM 中的特定元素，而不是任何 body 元素。 body 元素暴露了多个 Window 对象的事件处理程序作为事件处理程序的内容属性。它还镜像了它们的事件处理程序 IDL 属性。 Window 对象的 onblur，onerror，onfocus，onload，onresize 和 onscroll 事件处理程序暴露给了 body 元素，通常由 HTML 元素支持的相同名称替换通用事件处理程序。 示例 1 因此，例如，派发在文档的 body 元素的子元素上的冒泡错误事件将首先触发该元素的 onerror 事件处理程序的内容属性，然后触发 根 html 元素的 onerror 事件处理程序的内容属性，然后才触发 body 元素上的 onerror 事件处理程序的内容属性。这是因为事件冒泡从 target，到 body，到 html，到文档，最后到 Window，并且 body 上的事件处理程序正在监视的是 Window 而不是 body。但是，使用 addEventListener() 添加给 body 元素，则事件冒泡时在 body 上运行，而不是到达 Window 对象时运行。 示例 2 此页面更新指示以显示用户是否在线： Online or offline? function update(online) { document.getElementById('status').textContent = online ? 'Online' : 'Offline'; } You are: (Unknown) 4.3.2 article 元素 元素定义 类别： 流内容 节内容 可感知内容 可以使用此元素的上下文： 流内容里的任何地方 内容模型： 流内容，但后代里没有 main 元素 标签省略： 这两个标签都不可省略 内容属性： 全局属性 允许的 ARIA role attribute values： article (默认 - 不设置), application, document feed, main 或 region. 允许的 Allowed ARIA state and property attributes： 全局 aria-* 属性 适用于默认角色的任何 aria-* 属性 DOM 接口： 使用 HTMLElement 接口 article 元素代表文档，页面，应用程序或站点中的完整或独立的组成。这可能是杂志，报纸，技术或学术文章，文章或报告，博客或其他社交媒体帖子。 一般规则是，仅当元素的内容需要在文档的大纲中明确列出时，article 元素才适用。通常通过将标题（h1-h6 元素）作为 article 元素的子元素来识别每篇文章。 辅助技术可以将 article 的语义传达给用户。该信息可以向用户提供有关内容类型的提示。 例如，当用户导航到 article 元素时，屏幕阅读器可以声明元素的角色，在这种情况下，该元素与元素名称 “article” 匹配。用户代理还可以提供导航到 article 元素的方法。 当嵌套 article 元素时，内部 article 元素表示原则上与外部 article 内容相关的文章。例如，站点上的博客条目可以由嵌套在该博客条目的 article 元素内的 article 元素中的其他博客条目的摘要组成。 示例 3 以下是使用 article 元素标记的博客文章摘录的示例： Short note on wearing shorts Posted on Wednesday, 10 February 2016 by Patrick Lauke. 6 comments A fellow traveller posed an interesting question: Why do you wear shorts rather than longs? The person was wearing culottes as the time, so I considered the question equivocal in nature, but I attempted to provide an honest answer despite the dubiousness of the questioner’s dress. The short answer is that I enjoy wearing shorts, the long answer is... Continue reading: Short note on wearing shorts 注意 schema.org 词汇表可以使用 CreativeWork-Article 子类型来提供有关文章类型的更详细的信息，还可以提供其他信息，例如文章的发布日期。 示例 4 此示例显示了使用 article 元素的博客帖子，其中带有一些 schema.org 批注： The Very First Rule of Life 3 days ago If there’s a microphone anywhere near you, assume it’s hot and sending whatever you’re saying to the world. Seriously. ... Show comments... 这是同一篇博客文章，但显示了一些评论： The Very First Rule of Life 3 days ago If there’s a microphone anywhere near you, assume it’s hot and sending whatever you’re saying to the world. Seriously. ... Comments Posted by: George Washington 15 minutes ago Yeah! Especially when talking about your lobbyist friends! Posted by: George Hammond 5 minutes ago Hey, you have the same first name as me. 请注意，使用排序列表 ol 来组织评论。还要注意，注释是文章的小节，使用 section 元素标识。 4.3.3 section 元素 元素定义 类别： 流内容 节内容 可感知内容 可以使用此元素的上下文： 流内容里的任何地方 内容模型： 流内容 标签省略： 这两个标签都不可省略 内容属性： 全局属性 允许的 ARIA role attribute values： region (默认 - 不设置), alert, alertdialog, application, contentinfo , dialog, document, feed, log, main, marquee, presentation, region, search, status 或 tabpanel. 允许的 Allowed ARIA state and property attributes： 全局 aria-* 属性 适用于默认角色的任何 aria-* 属性 DOM 接口： 使用 HTMLElement 接口 section 元素代表文档或应用程序的通用部分（原：section）。在这种情况下，一段（原：section）是内容的主题分组。通常应通过将标题（h1-h6 元素）作为 section 元素的子元素来标识每个部分。 示例 5 部分（原：sections）的示例包括章节，选项卡式对话框中的各个选项卡式页面或论文的编号部分。网站的首页可以分为几个部分，以进行介绍，新闻和联系信息。 注意 当内容完整或自成一体时，鼓励作者使用 article 元素而不是 section 元素。 注意 section 元素不是通用容器元素。如果仅出于样式目的或为了方便编写脚本而需要元素，则鼓励作者使用 div 元素。通常的规则是，section 元素仅在文档的大纲中明确列出该元素的内容时才适用。 当元素具有显式标签（原：label）时，辅助技术可以将部分的语义传达给用户。该信息可以向用户提供有关内容类型的提示。例如，当用户导航到 section 元素时，可以通过屏幕阅读器软件声明该元素的角色（在这种情况下为 “region”）。用户代理还可以提供导航到 section 元素的方法。 示例 6 在下面的示例中，我们看到有关苹果的文章（较大的网页的一部分），其中包含两个简短的部分（sections）。 注意 该 section 具有一个 aria-label 属性，提供内容的简要说明。辅助技术可以将 region 角色以及 aria-label 值传达给用户。 Apples Tasty, delicious fruit! The apple is the pomaceous fruit of the apple tree. Red Delicious These bright red apples are the most common found in many supermarkets. Granny Smith These juicy, green apples make a great filling for apple pies. 示例 7 这是一个包含两个部分（原：sections）的毕业计划，一个部分（原：section）用于列出要毕业的人员，另一部分（原：section）用于说明仪式。（此示例中的标记是一种罕见的风格，有时用于最小化元素间空白的数量。） 示例 8 在此示例中，书籍作者将某些部分标记为章节，另一些标记为附录，并使用 CSS 对这两个部分的标题进行了不同的样式设置。整本书包装在一个 article 元素中，作为包含其他书籍的更大文档的一部分。 section { border: double medium; margin: 2em; } section.chapter h3 { font: 2em Roboto, Helvetica Neue, sans-serif; } section.appendix h3 { font: small-caps 2em Roboto, Helvetica Neue, sans-serif; } My Book A sample with not much content Published by Dummy Publicorp Ltd. My First Chapter This is the first of my chapters. It doesn’t say much. But it has two paragraphs! It Continues: The Second Chapter Bla dee bla, dee bla dee bla. Boom. Chapter Three: A Further Example It’s not like a battle between brightness and earthtones would go unnoticed. But it might ruin my story. Appendix A: Overview of Examples These are demonstrations. Appendix B: Some Closing Remarks Hopefully this long example shows that you can style sections, so long as they are used to indicate actual sections. 4.3.4 nav 元素 元素定义 类别： 流内容 节内容 可感知内容 可以使用此元素的上下文： 流内容里的任何地方 内容模型： 流内容，但后代里没有 main 元素 标签省略： 这两个标签都不可省略 内容属性： 全局属性 允许的 ARIA role attribute values： navigation (默认 - 不设置) 允许的 Allowed ARIA state and property attributes： 全局 aria-* 属性 适用于默认角色的任何 aria-* 属性 DOM 接口： 使用 HTMLElement 接口 nav 元素表示链接到其他页面或页面中各个部分的页面部分：具有导航链接的部分。 辅助技术可以将导航的语义传达给用户。该信息可以向用户提供有关内容类型的提示。例如，当用户导航到 nav 元素时，屏幕阅读器可以声明该元素的角色（在本例中为 “navigation”）。 用户代理还可以提供导航至 nav 元素的方法。 注意 如果 nav 元素的内容表示项目列表，请使用 list 标记来帮助理解和导航。 注意 并非页面上的所有链接组都需要位于 nav 元素中-该元素主要用于包含主要导航块的部分。特别是，页脚通常有简短的指向站点各个页面的链接列表，例如服务条款，主页和版权页面。在这种情况下，仅 footer 元素就足够了。尽管在这种情况下可以使用 nav 元素，但通常是不必要的。 注意 User agents (such as screen readers) that are targeted at users who can benefit from navigation information being omitted in the initial rendering, or who can benefit from navigation information being immediately available, can use this element as a way to determine what content on the page to initially skip or provide on request (or both). 示例 9 在以下示例中，有两个 nav 元素，一个用于站点的主要导航，另一个用于页面本身的辅助导航。 The Wiki Center Of Exampland Home Current Events ...more... Demos in Exampland Written by A. N. Other. Public demonstrations Demolitions ...more... Public demonstrations ...more... Demolitions ...more... ...more... Edit | Delete | Rename © copyright 1998 Exampland Emperor 示例 10 在下面的示例中，页面上有几个存在链接的地方，但是这些地方中只有一个被视为导航部分。 Wake up sheeple! News - Blog - Forums Last Modified: 2009-04-01 Navigation Index of all articles Things sheeple need to wake up for today Sheeple we have managed to wake My Day at the Beach Today I went to the beach and had a lot of fun. ...more content... Posted Thursday. ...more blog posts... Copyright © 2010 The Example Company About - Privacy Policy - Contact Us 请注意用于包装页面主要内容的 main 元素。在这种情况下，除页面页眉和页脚之外的所有内容。 您还可以在上面的示例中看到微数据注释，这些注释使用 schema.org 词汇表提供有关博客文章的发布日期和其他元数据。 示例 11 nav 元素不必包含列表，它也可以包含其他类型的内容。 在此导航块中，以散文形式提供了链接： Navigation You are on my home page. To the north lies my blog, from whence the sounds of battle can be heard. To the east you can see a large mountain, upon which many school papers are littered. Far up thus mountain you can spy a little figure who appears to be me, desperately scribbling a thesis. To the west are several exits. One fun-looking exit is labeled \"games\". Another more boring-looking exit is labeled ISP™. To the south lies a dark and dank contacts page. Cobwebs cover its disused entrance, and at one point you see a rat run quickly out of the page. 示例 12 在此示例中，在电子邮件应用程序中使用了 nav，以使用户切换文件夹： Folders Inbox Sent Drafts Trash Customers 4.3.5 aside 元素 元素定义 类别： 流内容 节内容 可感知内容 可以使用此元素的上下文： 流内容里的任何地方 内容模型： 流内容，但后代里没有 main 元素 标签省略： 这两个标签都不可省略 内容属性： 全局属性 允许的 ARIA role attribute values： complementary (默认 - 不设置), feed, note, search 或 presentation。 允许的 Allowed ARIA state and property attributes： 全局 aria-* 属性 适用于默认角色的任何 aria-* 属性 DOM 接口： 使用 HTMLElement 接口 aside 元素代表页面的一部分，该部分由与 父级节内容 无关的内容组成，可以认为与该内容是分开的。这些部分通常在印刷版式中表示为侧边栏。 该元素可用于印刷效果，例如拉引号或侧边栏，广告，导航元素组以及其他与最接近的祖先节内容的主要内容分隔的内容。 辅助技术可以将旁白的语义传达给用户。该信息可以向用户提供有关内容类型的提示。例如，当用户导航到 aside 元素时，可以通过屏幕阅读器软件声明该元素的角色（在这种情况下是 “complementary”）。用户代理还可以提供导航到 aside 元素的方法。 注意 只将 aside 元素用在附加说明上是不合适的，因为它们是文档主要流程的一部分。 示例 13 以下示例显示了如何在欧洲更长的新闻报道中使用 aside 标记瑞士的背景资料。 Switzerland Switzerland, a land-locked country in the middle of geographic Europe, has not joined the geopolitical European Union, though it is a signatory to a number of European treaties. 示例 14 下面的示例显示如何在较长的文章中使用 aside 来标记引用。 He later joined a large company, continuing on the same work. I love my job. People ask me what I do for fun when I’m not at work. But I’m paid to do my hobby, so I never know what to answer. Some people wonder what they would do if they didn’t have to work... but I know what I would do, because I was unemployed for a year, and I filled that time doing exactly what I do now. People ask me what I do for fun when I’m not at work. But I’m paid to do my hobby, so I never know what to answer. Of course his work — or should that be hobby? — isn’t his only passion. He also enjoys other pleasures. 示例 15 以下摘录显示了 aside 可以如何用于 Blogroll 和博客上的其他附带内容： My wonderful blog My tagline My blogroll Example Blog Archives My last post My first post Twitter Feed I’m on vacation, writing my blog. I’m going to go on vacation soon. My last post This is my last post. Permalink My first post This is my first post. element; it would be wrong, for instance, to put the blogroll here, since the blogroll isn’t really related to this post specifically, only to the page as a whole --> Posting While I’m thinking about it, I wanted to say something about posting. Posting is fun! Permalink Archives — About me — Copyright 4.3.6 h1、h2、h3、h4、h5、h6 元素 元素定义 类别： 流内容 标题内容 可感知内容 可以使用此元素的上下文： 流内容里的任何地方 内容模型： 短语内容 标签省略： 这两个标签都不可省略 内容属性： 全局属性 允许的 ARIA role attribute values： heading (默认 - 不设置), tab, presentation。 允许的 Allowed ARIA state and property attributes： 全局 aria-* 属性 适用于默认角色的任何 aria-* 属性 DOM 接口： interface HTMLHeadingElement : HTMLElement {}; 这些元素代表其各个部分（原：section）的标题。 这些元素名称有数字等级。h1 元素具有最高等级，h6 元素具有最低等级，两个同名元素具有相同等级。 使用标题元素的等级创建文档大纲。 示例 16 以下代码显示了如何用六个标题等级来标记文档大纲。 top level heading 2nd level heading 3nd level heading 4th level heading 5th level heading 6th level heading 注意 如果不使用 section 元素，则文档大纲将会是相同的。 除非打算将 h1–h6 元素用作新节或小节的标题，否则不得将其用于标记副标题，副标题，替代标题和标语。相反，应在规范的第 4.13 节 “不带专用元素的通用习语” 中使用标记模式。 辅助技术通常会向用户声明标题的存在和级别，以提示您理解文档的结构并构建其轮廓的 “心理模型”。例如，当用户导航到 h1-h6 元素时，可以由屏幕阅读器声明元素的角色，在这种情况下为 “heading”，heading 级别为 “1” 至 “6”。用户代理还可以提供导航到 h1-h6 元素的方法。 示例 17 就它们各自的文档大纲（它们的标题和节结构）而言，这两个片段在语义上是等效的： Let’s call it a draw(ing surface) Diving in Simple shapes Canvas coordinates Canvas coordinates diagram Paths Let’s call it a draw(ing surface) Diving in Simple shapes Canvas coordinates Canvas coordinates diagram Paths 作者可能更喜欢前一种样式的简洁性，而后一种样式则是面对大量编辑时比较方便。 可以将这两种风格进行组合，以与旧版工具兼容，而在不再需要该兼容性时，仍可以进行将来的验证。 注意 h1-h6 元素的语义和含义在第 4.3.9 节 标题和小节中进一步详细介绍。 4.3.7 header 元素 元素定义 类别： 流内容 可感知内容 可以使用此元素的上下文： 流内容里的任何地方 内容模型： 流内容，但后代里没有 main 元素，header，footer 元素不能是 header 元素里的后代的节内容的后代 标签省略： 这两个标签都不可省略 内容属性： 全局属性 允许的 ARIA role attribute values： banner (默认 - 不设置), group, presentation。 允许的 Allowed ARIA state and property attributes： 全局 aria-* 属性 适用于默认角色的任何 aria-* 属性 DOM 接口： 使用 HTMLElement 接口 header 元素表示其最接近的祖先 main 元素或节内容或节根元素的介绍性内容。header 通常包含一组介绍性或导航性辅助工具。 如果 header 元素的最接近祖先的节根元素是 body 元素，而不是 main 元素或节内容元素的后代，则该 header 的作用域为 body 元素，并代表整个页面的介绍性内容。 辅助技术在应用于整个页面时可以向用户传达标题元素的语义。该信息可以提供有关内容类型的提示。例如，当用户导航到作用域为 body 元素的 header 元素时，可以通过屏幕阅读器软件宣布该元素的角色（在这种情况下为 “banner”）。用户代理还可以提供导航到作用域为 body 元素的header 元素的方法。 注意 header 元素通常旨在包含该部分的标题（h1-h6 元素），但这不是必需的。header 元素还可用于包裹内容的表格，搜索表单或任何相关徽标。 示例 18 这是一些 header 示例。第一个用于游戏： Welcome to... Voidwars! 以下代码段显示了如何使用该元素标记规范的 header： Scalable Vector Graphics (SVG) 1.2 W3C Working Draft 27 October 2004 This version: https://www.w3.org/TR/2004/WD-SVG12-20041027/ Previous version: https://www.w3.org/TR/2004/WD-SVG12-20040510/ Latest version of SVG 1.2: https://www.w3.org/TR/SVG12/ Latest SVG Recommendation: https://www.w3.org/TR/SVG/ Editor: Dean Jackson, W3C, dean@w3.org Authors: See Author List 注意 header 元素不是节内容。它没有引入新的节。 示例 19 在此示例中，页面具有由 h1 元素指定的页面标题，以及两个标题由 h2 元素指定的小节。header 元素之后的内容仍然是 header 元素中最后一个小节的一部分，因为 header 元素不参与大纲算法。 Little Green Guys With Guns Games Forum Download Important News To play today’s games you will need to update your client. Games You have three active games: ... 注意 对于开发人员要在另一个 header 中嵌套 header 或 footer 的情况：如果 header 或 footer 本身包含在节内容中，则 header 元素只能包含 header 或 footer。 示例 20 在此示例中，article 的 header 包含一个 aside，aside 包含一个 header。这是合理的，因为后代 header 在 aside 元素内。 Flexbox: The definitive guide About the author: Wes McSilly Contact him! (Why would you?) Expert in nothing but Flexbox. Talented circus sideshow. The guide about Flexbox was supposed to be here, but it turned out Wes wasn’t a Flexbox expert either. 4.3.8 footer 元素 元素定义 类别： 流内容 可感知内容 可以使用此元素的上下文： 流内容里的任何地方 内容模型： 流内容，但后代里没有 main 元素，header，footer 元素不能是 footer 元素里的后代的节内容的后代 标签省略： 这两个标签都不可省略 内容属性： 全局属性 允许的 ARIA role attribute values： contentinfo (默认 - 不设置), group, presentation。 允许的 Allowed ARIA state and property attributes： 全局 aria-* 属性 适用于默认角色的任何 aria-* 属性 DOM 接口： 使用 HTMLElement 接口 footer 元素表示其最接近的祖先 main 元素或节内容或节根元素的页脚。 footer 通常包含有关其部分的信息，例如谁编写的，与相关文档的链接，版权数据等。 footer 元素也可以包含表示附录，索引，较长的版权页，许可协议以及其他此类内容的整个部分。 如果 footer 元素的最接近祖先节根元素是 body 元素，而不是 main 元素或节内容元素的后代，则该页脚的作用域为 body 元素，并代表整个页面的页脚。 当 footer 元素应用于整个页面时，辅助技术可能会向用户传达其语义。该信息可以提供有关内容类型的提示。例如，当用户导航到作用域为 body 元素的 footer 元素时，可以通过屏幕阅读器软件声明该元素的角色（在这种情况下为 “content information”）。用户代理还可以提供导航到作用域为 body 元素的 footer 元素的方法。 注意 一节的作者或编辑者的联系信息属于 address 元素，可能本身也位于 footer 中。 可以同时在 header 或 footer 中使用行注释和其他信息（或两者都不放）。 footer 通常不必显示在 section 的末尾。 注意 footer 元素不是节内容；它没有引入新的 section。 示例 21 这是一个页面，该页面具有两个 footer，一个 footer 在顶部，一个 footer 在底部，具有相同的内容： Back to index... Lorem ipsum The ipsum of all lorems A dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Back to index... 示例 22 这是一个示例，该示例显示了 footer 元素同时用于站点范围的 footer 和 section footer。 The Ramblings of a Scientist The Ramblings of a Scientist Episode 15 Download video. Published on 2009/10/21 at 6:26pm My Favorite Trains I love my trains. My favorite train of all time is a Köf. It is fun to see them pull some coal cars because they look so dwarfed in comparison. Published on 2009/09/15 at 2:54pm Credits — Terms of Service — Blog Index Copyright © 2009 Gordon Freeman 示例 23 有些网站设计有时称为 “fat footers”，这些 footers 包含很多材料，包括图像，其他文章的链接，用于发送反馈的页面的链接，特殊优惠……从某种意义上讲，是整个页脚中的 “首页”。 此片段显示了带有 “fat footer” 的网站页面的底部： ... Articles Go to the gym with our somersaults class! Our teacher Jim takes you through the paces in this two-part article. Part 1 · Part 2 Tired of walking on the edge of a clif? Our guest writer Lara shows you how to bumble your way through the bars. Read more... The chips are down, now all that’s left is a potato. What can you do with it? Read more... About us... Send feedback! Sitemap Copyright © 2015 The Snacker — Terms of Service 4.3.9 标题和小节 h1-h6 元素是标题。 节内容元素中标题内容的第一个元素表示该部分的标题。随后具有相同或更高等级的标题将开始新的隐含小节，这些小节是上一节的父节的一部分。较低级别的后续标题开始新的隐含小节，这些小节是上一个小节的一部分。在这两种情况下，元素都代表隐含部分的标题。 除非打算将 h1–h6 元素用作新节或小节的标题，否则不得将其用于标记副标题，副标题，替代标题和标语。相反，应在规范的第4.13节“ 不带专用元素的通用习语” 中使用标记模式。 某些元素被称为节的根，包括 blockquote 和 td 元素。这些元素可以有自己的大纲，但是这些元素内的部分和标题不会有助于其祖先的大纲。 节内容元素始终被视为其最近的祖先节根或它们的节内容的最近祖先元素的子节，无论哪个最接近，无论其他标题可能创建了什么隐含部分。 示例 24 对于以下片段： Foo Bar Bla Baz Quux Thud Grunt ...结构为： Foo（body 部分的标题，包含 “Grunt” 段） Bar（标题起始的隐含部分，包含块引用和 “Baz” 段落） Quux（标题开头的隐含部分，标题本身除外） Thud（显式节标题） 请注意，该节是如何结束较早的隐式节的，以便使较后的段落（“Grunt”）回到顶层。 节的标题可能与其节嵌套级别相同。作者应使用适合该部分嵌套层级的标题。 还鼓励作者在节内容的元素中显式包装节，而不是依靠节内容的一个元素中具有多个标题而生成的隐式节。 示例 25 例如，以下是正确的： Apples Apples are fruit. Taste They taste lovely. Sweet Red apples are sweeter than green ones. Color Apples come in various colors. 但是，同一文档将更清楚地表示为： Apples Apples are fruit. Taste They taste lovely. Sweet Red apples are sweeter than green ones. Color Apples come in various colors. 以上两个文档在语义上都是相同的，并且在兼容的用户代理中将产生相同的大纲。 4.3.9.1 创建大纲 警告 尽管在其他软件（例如一致性检查器和浏览器扩展）中实现了大纲算法，但目前在图形浏览器或辅助技术用户代理中尚无已知的大纲算法的本机实现。因此，不能依赖大纲算法将文档结构传达给用户。作者应使用标题等级（h1-h6）传达文档结构。 本节是非规范性的。 本节定义了一种算法，用于为节内容元素或节根元素创建大纲。它是按照在 DOM 树的节点上以树顺序遍历的方式定义的，在遍历过程中，每个节点在进入节点和退出节点时都会被访问。每次访问节点时，可以将其视为触发进入或退出事件。 示例 26 以下伪代码片段： visitNode(node) onEnter(node) child = node.firstChild while(child != null) visitNode(child) child = child.nextSibling onExit(node) ...示例了如何递归遍历节点树以及何时触发进入和退出事件。请参阅 JavaScript 示例以获取可能的非递归 JavaScript 实现。 节内容元素或节根元素的大纲由一个或多个潜在嵌套节的列表组成。为其创建大纲的元素被称为大纲的所有者。 节是与原始 DOM 树中的某些节点相对应的容器。每个节可以具有一个与其关联的标题，并且可以包含任意数量的其他嵌套子节。 用于大纲的算法还将DOM树中的每个节点与特定节和可能的标题相关联。（大纲中的部分不是部分元素，尽管有些可能与这些元素相对应-它们只是概念性部分。） 示例 27 以下标记片段： A B C D E F 4.3.10 使用总结 4.3.10.1 Article 还是 section ？ 4.4 分组内容 4.4.1 p 元素 4.4.2 address 元素 4.4.3 hr 元素 4.4.2 pre 元素 4.4.2 blockquote 元素 4.4.2 ol 元素 4.4.2 ul 元素 4.4.2 li 元素 4.4.2 dl 元素 4.4.2 dt 元素 4.4.2 dd 元素 4.4.2 figure 元素 4.4.2 figcaption 元素 4.4.2 main 元素 4.4.2 div 元素 4.5 文本级语义 4.5.1 a 元素 4.5.2 em 元素 4.5.3 strong 元素 4.5.4 small 元素 4.5.5 s 元素 4.5.5 cite 元素 4.5.6 q 元素 4.5.7 dfn 元素 4.5.8 abbr 元素 4.5.9 ruby 元素 4.5.10 rb 元素 4.5.11 rt 元素 4.5.12 rtc 元素 4.5.13 rp 元素 4.5.14 data 元素 4.5.15 time 元素 4.5.16 code 元素 4.5.17 var 元素 4.5.18 samp 元素 4.5.19 kbd 元素 4.5.20 sub 和 sup 元素 4.5.21 i 元素 4.5.22 b 元素 4.5.23 u 元素 4.5.24 mark 元素 4.5.25 bdi 元素 4.5.26 bdo 元素 4.5.27 span 元素 4.5.28 br 元素 4.5.29 wbr 元素 4.6 编辑 4.6.1 ins 元素 4.6.2 del 元素 4.6.3 ins 和 del 元素的共同属性 4.6.4 编辑和段落 4.6.5 编辑和列表 4.6.6 编辑和表格 4.7 可嵌入内容 4.7.1 介绍 4.7.2 依赖 4.7.3 picture 元素 4.7.4 source 元素 4.7.5 img 元素 4.7.5.1 提供文本作为图像替代方案的要求 4.7.5.1.1 用户受益于图像文本替代方案的示例 4.7.5.1.2 一般准则 4.7.5.1.3 仅包含图像的链接或按钮 4.7.5.1.4 图像表示：Charts, diagrams, graphs, maps, illustrations 图表（数据展示） 图解（模型流程图等抽象） 图表（结构性比chart要弱） 映射（存在真实的结构 再把数据映射上去 比如地图） 插图（辅助说明某个数据用 4.7.5.1.5 文本图像 4.7.5.1.6 包含文本的图像 4.7.5.1.7 增强页面内容主题或主题图像 4.7.5.1.8 一些周围文本的图形展示 4.7.5.1.9 纯粹的不添加任何信息的装饰性图像 4.7.5.1.10 行内图像 4.7.5.1.11 一组形成没有链接的单个较大图片的图像 4.7.5.1.12 图像映射 4.7.5.1.13 一组包含链接的单个大图片的图像 4.7.5.1.14 pictures 图像 4.7.5.1.15 webcam 图像 4.7.5.1.16 文本替代在发布不可用时 4.7.5.1.17 不适用于用户的图像 4.7.5.1.18 icon 图像 4.7.5.1.19 徽标，徽章，旗帜或标志 4.7.5.1.20 CAPTCHA 图像 4.7.5.1.21 picture 元素中的图像 4.7.5.1.22 标记生成指南 4.7.5.1.23 一致性检查指南 4.7.14 map 元素 4.7.15 area 元素 4.7.16 Image maps 4.7.17 MathML 4.7.18 SVG 4.7.19 尺寸属性 4.8 链接 4.8.1 介绍 4.8.2 通过 a 元素和 area 元素创建链接 4.8.3 a 元素和 area 元素的 API 4.8.4 Following hyperlinks 4.8.5 下载资源 4.8.6 链接类型 4.8.6.1 alternate 4.8.6.2 author 4.8.6.3 bookmark 4.8.6.4 help 4.8.6.5 icon 4.8.6.6 license 4.8.6.7 nofollow 4.8.6.8 noopener 4.8.6.9 noreferrer 4.8.6.10 search 4.8.6.11 stylesheet 4.8.6.12 tag 4.8.6.13 顺序链接类型 4.8.6.13.1 next 4.8.6.13.2 prev 4.8.6.14 其他链接类型 4.9 表格数据 4.9.1 table 元素 4.9.1.1 描述表格的技巧 4.9.1.2 表格设计的技巧 4.9.2 caption 元素 4.9.3 colgroup 元素 4.9.4 col 元素 4.9.5 tbody 元素 4.9.6 thead 元素 4.9.7 tfoot 元素 4.9.8 tr 元素 4.9.9 td 元素 4.9.10 th 元素 4.9.11 td 和 th 元素通用属性 4.9.12 处理模型 4.9.12.1 形成表格 4.9.12.2 数据单元格和表头单元格之间形成关系 4.9.13 例子 4.10 表单 4.10.1 介绍 4.10.1.1 编写用户界面 4.10.1.2 实现服务端处理 4.10.1.3 配置用户界面与服务端通信 4.10.1.4 表单校验 4.10.1.5 表单控件的自动填写 4.10.1.6 字段类型，自动填充字段名称和输入模态之间的区别 4.10.1.7 日期、时间、数字格式 4.10.2 分类 4.10.3 form 元素 4.10.4 label 元素 4.10.5 input 元素 4.10.5.1 type 属性的状态 4.10.5.1.1 hidden 状态(type=hidden) 4.10.5.1.2 text 状态(type=text)和 search 状态(type=search) 4.10.5.1.3 telephone 状态(type=tel) 4.10.5.1.4 URL 状态(type=url) 4.10.5.1.5 E-mail 状态(type=email) 4.10.5.1.6 password 状态(type=password) 4.10.5.1.7 date 状态(type=date) 4.10.5.1.8 month 状态(type=month) 4.10.5.1.9 week 状态(type=week) 4.10.5.1.10 time 状态(type=time) 4.10.5.1.11 当地日期 和 time 状态(type=datetime-local) 4.10.5.1.12 number 状态(type=number) 4.10.5.1.13 range 状态(type=range) 4.10.5.1.14 color 状态(type=color) 4.10.5.1.15 checkbox 状态(type=checkbox) 4.10.5.1.16 radio 按钮状态(type=radio) 4.10.5.1.17 file 上传状态(type=file) 4.10.5.1.18 submit 按钮状态(type=submit) 4.10.5.1.19 image 状态(type=image) 4.10.5.1.20 reset 状态(type=reset) 4.10.5.1.21 button 状态(type=button) 4.10.5.2 关于表单控件本地化的实现说明 4.10.5.3 公共 input 元素属性 4.10.5.3.1 maxlength 和 minlength 属性 4.10.5.3.2 size 属性 4.10.5.3.3 readonly 属性 4.10.5.3.4 required 属性 4.10.5.3.5 multiple 属性 4.10.5.3.6 pattern 属性 4.10.5.3.7 min 和 max 属性 4.10.5.3.8 step 属性 4.10.5.3.9 list 属性 4.10.5.3.10 placeholder 属性 4.10.5.4 公共 input 元素 API 4.10.5.5 公共 事件行为 4.10.6 button 元素 4.10.7 select 元素 4.10.8 datalist 元素 4.10.9 optgroup 元素 4.10.10 option 元素 4.10.11 textarea 元素 4.10.12 output 元素 4.10.13 progress 元素 4.10.14 meter 元素 4.10.15 fieldset 元素 4.10.16 legend 元素 4.10.17 表单控件基础设施 4.10.17.1 表单控件值 4.10.17.2 可变性 4.10.17.3 控件和表单之间的联系 4.10.18 表单控件公共属性 4.10.18.1 命名表单控件：name 属性 4.10.18.2 提交元素方向：dirname 属性 4.10.18.3 限制用户输入长度：maxlength 属性 4.10.18.4 设置最小输入长度要求：minlength 属性 4.10.18.5 启用和禁用表单控件：disabled 属性 4.10.18.6 表单提交 4.10.18.6.1 自动聚焦表单控件：autofocus 属性 4.10.18.7 自动填充 4.10.18.7.1 自动填充表单控件：autocomplete 属性 4.10.18.7.2 处理模型 4.10.19 用于文本选择的 API 4.10.20 约束 4.10.20.1 定义 4.10.20.2 约束校验 4.10.20.3 约束校验的 API 4.10.20.4 安全性 4.10.21 表单提交 4.10.21.1 介绍 4.10.21.2 Implicit submission 4.10.21.3 表单提交算法 4.10.21.4 构建表单数据集 4.10.21.5 选择表单提交编码 4.10.21.6 URL 编码的表单数据 4.10.21.7 multipart 表单数据 4.10.21.8 纯文本 表单数据 4.10.22 重置表单 4.11 可交互元素 4.11.1 details 元素 4.11.2 summary 元素 4.11.3 命令 4.11.3.1 部分 4.11.3.2 使用 a 元素定义一个命令 4.11.3.3 使用 button 元素定义一个命令 4.11.3.4 使用 input 元素定义一个命令 4.11.3.5 使用 option 元素定义一个命令 4.11.3.6 使用带 accesskey 属性的 label 元素定义一个命令 4.11.3.7 使用带 accesskey 属性的 legend 元素定义一个命令 4.11.3.8 使用带 accesskey 属性在其他元素上定义一个命令 4.11.4 dialog 元素 4.11.4.1 锚点 4.12 脚本 4.12.1 script 元素 4.12.1.1 处理模型 4.12.1.2 脚本语言 4.12.1.3 script 元素的内容约束 4.12.1.4 外部脚本的内联文档 4.12.1.5 script 元素与 XSLT 的交互 4.12.2 noscript 元素 4.12.3 template 元素 4.12.3.1 template 元素与 XSLT 和 XPath 的交互 4.12.4 canvas 元素 4.12.4.1 色彩空间和色彩校正 4.12.4.2 将位图划分为文件 4.12.4.3 使用 canvas 元素的安全性 4.13 没有专用元素的常见习语 4.13.1 Subheadings, subtitles, alternative titles and taglines 4.13.2 面包屑导航 4.13.3 标签云 4.13.4 Conversations 4.13.5 Footnotes 4.14 可禁止的元素 4.15 使用选择器匹配 HTML 元素 4.15.1 大小写敏感 4.15.2 伪类 Copyright © chouchou 2019 all right reserved，powered by Gitbook当前页面修订时间： 2019-09-30 10:23:41 "},"docs/HTML5.2/5 用户互动.html":{"url":"docs/HTML5.2/5 用户互动.html","title":"5 用户互动","keywords":"","body":"5 用户互动 5.1 hidden 属性 5.2 惰性子树 5.3 激活 5.4 焦点 5.4.1 介绍 5.4.2 数据模型 5.4.3 tabindex 属性 5.4.4 处理模型 5.4.5 顺序焦点导航 5.4.6 焦点管理 API 5.4.7 剪贴板动作和焦点 5.5 分配键盘快捷键 5.5.1 介绍 5.5.2 accesskey 属性 5.5.3 处理模型 5.6 编辑 5.6.1 使文档区域可编辑：contenteditable 内容属性 5.6.2 使整个文档可编辑：designMode IDL 属性 5.6.3 页内编辑器的最佳实践 5.6.4 编辑 API 5.6.5 拼写和语法检查 5.7 拖放 5.7.1 介绍 5.7.2 拖动数据存储 5.7.3 DataTransfer 接口 5.7.3.1 DataTransferItemList 接口 5.7.3.2 DataTransferItem 接口 5.7.4 DragEvent 接口 5.7.5 拖放处理模型 5.7.6 事件总结 5.7.7 draggable 属性 5.7.8 拖放模里中的安全风险 Copyright © chouchou 2019 all right reserved，powered by Gitbook当前页面修订时间： 2019-09-10 13:15:31 "},"docs/HTML5.2/6 加载网页.html":{"url":"docs/HTML5.2/6 加载网页.html","title":"6 加载网页","keywords":"","body":"6 加载网页 6.1 浏览上下文 6.1.1 嵌套浏览上下文 6.1.1.1 在 DOM 中导航嵌套浏览上下文 6.1.2 辅助浏览上下文 6.1.2.1 在 DOM 中导航辅助浏览上下文 6.1.3 安全性 6.1.4 浏览上下文的分组 6.1.5 浏览上下文名称 6.1.6 浏览上下文脚本设置 6.2 Window，WindowProxy 和 Location 对象的安全基础结构 6.2.1 集成 IDL 6.2.2 共享内部插槽：[[CrossOriginPropertyDescriptorMap]] 6.2.3 共享抽象操作 6.2.3.1 CrossOriginProperties ( O ) 6.2.3.2 IsPlatformObjectSameOrigin ( O ) 6.2.3.3 CrossOriginGetOwnPropertyHelper ( O, P ) 6.2.3.3.1 CrossOriginPropertyDescriptor ( crossOriginProperty, originalDesc ) 6.2.3.3.2 CrossOriginFunctionWrapper ( needsWrapping, functionToWrap ) 6.2.3.4 CrossOriginGet ( O, P, Receiver ) 6.2.3.5 CrossOriginSet ( O, P, V, Receiver ) 6.2.3.6 CrossOriginOwnPropertyKeys ( O ) 6.3 Window 对象 6.3.1 用于按名称创建和浏览浏览上下文的 API 6.3.2 访问其他浏览上下文 6.3.3 对 Window 对象的命名访问 6.3.4 垃圾收集和浏览上下文 6.3.5 关闭浏览上下文 6.3.6 浏览器界面元素 6.3.7 WindowProxy 对象 6.3.7.1 WindowProxy 内部方法 6.3.7.1.1 [[GetPrototypeOf]] ( ) 6.3.7.1.2 [[SetPrototypeOf]] ( V ) 6.3.7.1.3 [[IsExtensible]] ( ) 6.3.7.1.4 [[PreventExtensions]] ( ) 6.3.7.1.5 [[GetOwnProperty]] ( P ) 6.3.7.1.6 [[DefineOwnProperty]] ( P, Desc ) 6.3.7.1.7 [[Get]] ( P, Receiver ) 6.3.7.1.8 [[Set]] ( P, V, Receiver ) 6.3.7.1.9 [[Delete]] ( P ) 6.3.7.1.10 [[OwnPropertyKeys]] ( ) 6.4 源 6.4.1 放宽同源限制 6.5 沙箱 6.6 会话历史和导航 6.6.1 浏览上下文的会话历史 6.6.2 History 接口 6.6.3 会话历史记录的实现说明 6.6.4 Location 接口 6.6.4.1 Location 内部方法 6.6.4.1.1 [[GetPrototypeOf]] ( ) 6.6.4.1.2 [[SetPrototypeOf]] ( V ) 6.6.4.1.3 [[IsExtensible]] ( ) 6.6.4.1.4 [[PreventExtensions]] ( ) 6.6.4.1.5 [[GetOwnProperty]] ( P ) 6.6.4.1.6 [[DefineOwnProperty]] ( P, Desc ) 6.6.4.1.7 [[Get]] ( P, Receiver ) 6.6.4.1.8 [[Set]] ( P, V, Receiver ) 6.6.4.1.9 [[Delete]] ( P ) 6.6.4.1.10 [[OwnPropertyKeys]] ( ) 6.7 浏览网页 6.7.1 跨文档导航 6.7.2 页面加载 HTML 文件的处理模型 6.7.3 页面加载 XML 文件的处理模型 6.7.4 页面加载文本文件的处理模型 6.7.5 用于 multipart / x-mixed-replace 资源的加载处理模型 6.7.6 页面加载媒体的处理模型 6.7.7 加载使用插件的内容的加载处理模型 6.7.8 页面加载处理模型，用于没有 DOM 的行内内容 6.7.9 导航到片段 6.7.10 历史遍历 6.7.10.1 持久的用户状态恢复 6.7.10.2 PopStateEvent 接口 6.7.10.3 HashChangeEvent 接口 6.7.10.4 PageTransitionEvent 接口 6.7.11 卸载文件 6.7.11.1 BeforeUnloadEvent 接口 6.7.12 支持文档加载 6.7.13 浏览器状态 Copyright © chouchou 2019 all right reserved，powered by Gitbook当前页面修订时间： 2019-09-05 20:31:06 "},"docs/HTML5.2/7 Web 应用程序 API.html":{"url":"docs/HTML5.2/7 Web 应用程序 API.html","title":"7 Web 应用程序 API","keywords":"","body":"7 Web 应用程序 API 7.1 脚本 7.1.1 介绍 7.1.2 启用和禁用脚本 7.1.3 处理模型 7.1.3.1 定义 7.1.3.2 获取脚本 7.1.3.3 创建脚本 7.1.3.4 调用脚本 7.1.3.5 Realms, settings objects, and global objects 7.1.3.5.1 Entry 7.1.3.5.2 Incumbent 7.1.3.5.3 Current 7.1.3.5.4 Relevant 7.1.3.6 杀死脚本 7.1.3.7 与 JavaScript 作业队列集成 7.1.3.7.1 EnqueueJob(queueName, job, arguments) 7.1.3.8 与 JavaScript 模块系统集成 7.1.3.8.1 HostResolveImportedModule(referencingModule, specifier) 7.1.3.9 运行时脚本错误 7.1.3.9.1 文档中的运行时脚本错误 7.1.3.9.2 ErrorEvent 接口 7.1.3.10 Unhandled promise rejections 7.1.3.10.1 HostPromiseRejectionTracker 实现 7.1.3.10.2 PromiseRejectionEvent 接口 7.1.3.11 HostEnsureCanCompileStrings(callerRealm, calleeRealm) 7.1.4 事件循环 7.1.4.1 定义 7.1.4.2 处理模型 7.1.4.3 通用任务源 7.1.5 事件 7.1.5.1 事件处理程序 7.1.5.2 对元素，文档对象和 Window 对象的事件处理程序 7.1.5.2.1 IDL 定义 7.1.5.3 Event firing 7.1.5.4 Events 和 Window 对象 7.2 The WindowOrWorkerGlobalScope mixin 7.3 Base64 实用方法 7.4 动态插入标记 7.4.1 Opening the input stream 7.4.2 Closing the input stream 7.4.3 document.write() 7.4.4 document.writeln() 7.5 计时器 7.6 用户提示 7.6.1 简单的对话框 7.6.2 Printing 7.7 系统状态和功能 7.7.1 Navigator 对象 7.7.1.1 客户端检测 7.7.1.2 语言偏好 7.7.1.3 自定义方案和内容处理程序：registerProtocolHandler() 和 registerContentHandler() 方法 7.7.1.3.1 安全和隐私 7.7.1.3.2 样本用户界面 7.7.1.4 Cookies 7.8 图像 7.9 动画帧 Copyright © chouchou 2019 all right reserved，powered by Gitbook当前页面修订时间： 2019-09-05 20:58:17 "},"docs/HTML5.2/8 HTML 语法.html":{"url":"docs/HTML5.2/8 HTML 语法.html","title":"8 HTML 语法","keywords":"","body":"8 HTML 语法 8.1 编写 HTML 文档 8.1.1 DOCTYPE 8.1.2 元素 8.1.2.1 开始标记 8.1.2.2 结束标记 8.1.2.3 属性 8.1.2.4 可选标记 8.1.2.5 内容模型的限制 8.1.2.6 对原始文本和可转换原始文本元素的内容的限制 8.1.3 文本 8.1.3.1 换行 8.1.4 字符引用 8.1.5 CDATA sections 8.1.6 注释 8.2 解析文本 8.3 序列化 HTML 片段 8.4 解析 HTML 片段 8.5 命名字符引用 Copyright © chouchou 2019 all right reserved，powered by Gitbook当前页面修订时间： 2019-09-10 13:15:14 "},"docs/HTML5.2/9 XML 语法.html":{"url":"docs/HTML5.2/9 XML 语法.html","title":"9 XML 语法","keywords":"","body":"9 XML 语法 9.1 使用 XML 语法编写文档 9.2 解析 XML 文档 9.3 序列化 XML 片段 9.4 解析 XML 片段 Copyright © chouchou 2019 all right reserved，powered by Gitbook当前页面修订时间： 2019-09-10 13:05:19 "},"docs/HTML5.2/10 渲染.html":{"url":"docs/HTML5.2/10 渲染.html","title":"10 渲染","keywords":"","body":"10 渲染 10.1 介绍 10.2 CSS 用户代理样式表和表现提示 10.3 非替换元素 10.3.1 隐藏元素 10.3.2 页面 10.3.3 流内容 10.3.4 短语内容 10.3.5 双向文本 10.3.6 Quotes 10.3.7 Sections and headings 10.3.8 列表 10.3.9 表格 10.3.10 外边距合并的怪异 10.3.11 表单控件 10.3.12 hr 元素 10.3.13 fieldset 和 legend 元素 10.4 替换元素 10.4.1 可嵌入内容 10.4.2 图像 10.4.3 可嵌入内容和图像的属性 10.4.4 图像映射 10.5 部件（Widgets） 10.5.1 介绍 10.5.2 button 元素 10.5.3 details 和 summary 元素 10.5.4 input 元素作为文本输入的部件 10.5.5 input 元素作为特定域的部件 10.5.6 input 元素作为范围控制 10.5.7 input 元素作为色井 10.5.8 input 元素作为复选和单选的部件 10.5.9 input 元素作为文件上传部件 10.5.10 input 元素作为按钮 10.5.11 marquee 元素 10.5.12 meter 元素 10.5.13 progress 元素 10.5.14 select 元素 10.5.15 textarea 元素 10.6 Frames and framesets 10.7 可交互媒体 10.7.1 链接，表单和导航 10.7.2 title 属性 10.7.3 编辑主机 10.7.4 在本机用户界面中呈现的文本 10.8 打印媒体 10.9 无格式 XML 文档 Copyright © chouchou 2019 all right reserved，powered by Gitbook当前页面修订时间： 2019-09-10 13:03:17 "},"docs/HTML5.2/11 过时的功能.html":{"url":"docs/HTML5.2/11 过时的功能.html","title":"11 过时的功能","keywords":"","body":"11 过时的功能 11.1 过时但符合要求的功能 11.1.1 过时但符合要求的功能的警告 11.2 不符合要求的功能 11.3 实现要求 11.3.1 applet 元素 11.3.2 marquee 元素 11.3.3 Frames 11.3.4 其他元素，属性和 API 11.3.4.1 插件 Copyright © chouchou 2019 all right reserved，powered by Gitbook当前页面修订时间： 2019-09-06 10:19:35 "},"docs/HTML5.2/12 IANA 考虑因素.html":{"url":"docs/HTML5.2/12 IANA 考虑因素.html","title":"12 IANA 考虑因素","keywords":"","body":"12 IANA 考虑因素 12.1 text/html 12.2 multipart/x-mixed-replace 12.3 application/xhtml+xml 12.4 web+ scheme prefix Copyright © chouchou 2019 all right reserved，powered by Gitbook当前页面修订时间： 2019-09-06 10:13:50 "}}